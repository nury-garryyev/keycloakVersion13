{"version":3,"sources":["../../../src/app/content/linked-accounts-page/LinkedAccountsPage.tsx"],"names":["React","withRouter","Badge","Button","DataList","DataListAction","DataListItemCells","DataListCell","DataListItemRow","Stack","StackItem","Title","TitleLevel","DataListItem","BitbucketIcon","CubeIcon","FacebookIcon","GithubIcon","GitlabIcon","GoogleIcon","InstagramIcon","LinkIcon","LinkedinIcon","MicrosoftIcon","OpenshiftIcon","PaypalIcon","StackOverflowIcon","TwitterIcon","UnlinkIcon","AccountServiceContext","Msg","ContentPage","createRedirect","LinkedAccountsPage","Component","constructor","props","context","state","linkedAccounts","unLinkedAccounts","getLinkedAccounts","doGet","then","response","console","log","data","filter","account","connected","setState","unLinkAccount","url","providerName","doDelete","linkAccount","redirectUri","location","pathname","params","providerId","window","href","accountLinkUri","render","localize","h2","makeRows","emptyRow","isLinked","isEmptyMessage","accounts","length","map","providerAlias","findIcon","displayName","badge","linkedUsername","social","backgroundColor","socialIconId","toLowerCase","includes","LinkedAccountsPagewithRouter"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2019 Red Hat, Inc. and/or its affiliates.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as React from 'react';\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\n\r\nimport {\r\n    Badge,\r\n    Button,\r\n    DataList,\r\n    DataListAction,\r\n    DataListItemCells,\r\n    DataListCell,\r\n    DataListItemRow,\r\n    Stack,\r\n    StackItem,\r\n    Title,\r\n    TitleLevel,\r\n    DataListItem,\r\n} from '@patternfly/react-core';\r\n\r\nimport {\r\n    BitbucketIcon,\r\n    CubeIcon,\r\n    FacebookIcon,\r\n    GithubIcon,\r\n    GitlabIcon,\r\n    GoogleIcon,\r\n    InstagramIcon,\r\n    LinkIcon,\r\n    LinkedinIcon,\r\n    MicrosoftIcon,\r\n    OpenshiftIcon,\r\n    PaypalIcon,\r\n    StackOverflowIcon,\r\n    TwitterIcon,\r\n    UnlinkIcon\r\n} from '@patternfly/react-icons';\r\n\r\nimport {HttpResponse} from '../../account-service/account.service';\r\nimport {AccountServiceContext} from '../../account-service/AccountServiceContext';\r\nimport {Msg} from '../../widgets/Msg';\r\nimport {ContentPage} from '../ContentPage';\r\nimport {createRedirect} from '../../util/RedirectUri';\r\n\r\ninterface LinkedAccount {\r\n    connected: boolean;\r\n    social: boolean;\r\n    providerAlias: string;\r\n    providerName: string;\r\n    displayName: string;\r\n    linkedUsername: string;\r\n}\r\n\r\ninterface LinkedAccountsPageProps extends RouteComponentProps {\r\n}\r\n\r\ninterface LinkedAccountsPageState {\r\n    linkedAccounts: LinkedAccount[];\r\n    unLinkedAccounts: LinkedAccount[];\r\n}\r\n\r\n/**\r\n * @author Stan Silvert\r\n */\r\nclass LinkedAccountsPage extends React.Component<LinkedAccountsPageProps, LinkedAccountsPageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n    public constructor(props: LinkedAccountsPageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n\r\n        this.state = {\r\n            linkedAccounts: [],\r\n            unLinkedAccounts: []\r\n        }\r\n\r\n        this.getLinkedAccounts();\r\n    }\r\n\r\n    private getLinkedAccounts(): void {\r\n        this.context!.doGet<LinkedAccount[]>(\"/linked-accounts\")\r\n            .then((response: HttpResponse<LinkedAccount[]>) => {\r\n                console.log({response});\r\n                const linkedAccounts = response.data!.filter((account) => account.connected);\r\n                const unLinkedAccounts = response.data!.filter((account) => !account.connected);\r\n                this.setState({linkedAccounts: linkedAccounts, unLinkedAccounts: unLinkedAccounts});\r\n            });\r\n    }\r\n\r\n    private unLinkAccount(account: LinkedAccount): void {\r\n        const url = '/linked-accounts/' + account.providerName;\r\n\r\n        this.context!.doDelete<void>(url)\r\n            .then((response: HttpResponse<void>) => {\r\n                console.log({response});\r\n                this.getLinkedAccounts();\r\n            });\r\n    }\r\n\r\n    private linkAccount(account: LinkedAccount): void {\r\n        const url = '/linked-accounts/' + account.providerName;\r\n\r\n        const redirectUri: string = createRedirect(this.props.location.pathname);\r\n\r\n        this.context!.doGet<{accountLinkUri: string}>(url, { params: {providerId: account.providerName, redirectUri}})\r\n            .then((response: HttpResponse<{accountLinkUri: string}>) => {\r\n                console.log({response});\r\n                window.location.href = response.data!.accountLinkUri;\r\n            });\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        return (\r\n            <ContentPage title={Msg.localize('linkedAccountsTitle')} introMessage={Msg.localize('linkedAccountsIntroMessage')}>\r\n                <Stack gutter='md'>\r\n                    <StackItem isFilled>\r\n                        <Title headingLevel={TitleLevel.h2} size='2xl'>\r\n                            <Msg msgKey='linkedLoginProviders'/>\r\n                        </Title>\r\n                        <DataList id=\"linked-idps\" aria-label='foo'>\r\n                            {this.makeRows(this.state.linkedAccounts, true)}\r\n                        </DataList>\r\n                    </StackItem>\r\n                    <StackItem isFilled/>\r\n                    <StackItem isFilled>\r\n                        <Title headingLevel={TitleLevel.h2} size='2xl'>\r\n                            <Msg msgKey='unlinkedLoginProviders'/>\r\n                        </Title>\r\n                        <DataList id=\"unlinked-idps\" aria-label='foo'>\r\n                            {this.makeRows(this.state.unLinkedAccounts, false)}\r\n                        </DataList>\r\n                    </StackItem>\r\n                </Stack>\r\n            </ContentPage>\r\n        );\r\n    }\r\n\r\n    private emptyRow(isLinked: boolean): React.ReactNode {\r\n        let isEmptyMessage = '';\r\n        if (isLinked) {\r\n            isEmptyMessage = Msg.localize('linkedEmpty');\r\n        } else {\r\n            isEmptyMessage = Msg.localize('unlinkedEmpty');\r\n        }\r\n\r\n        return (\r\n            <DataListItem key='emptyItem' aria-labelledby=\"empty-item\">\r\n                <DataListItemRow key='emptyRow'>\r\n                    <DataListItemCells dataListCells={[\r\n                        <DataListCell key='empty'><strong>{isEmptyMessage}</strong></DataListCell>\r\n                    ]}/>\r\n                </DataListItemRow>\r\n            </DataListItem>\r\n        )\r\n    }\r\n\r\n    private makeRows(accounts: LinkedAccount[], isLinked: boolean): React.ReactNode {\r\n        if (accounts.length === 0) {\r\n            return this.emptyRow(isLinked);\r\n        }\r\n\r\n        return (\r\n            <> {\r\n\r\n                accounts.map( (account: LinkedAccount) => (\r\n                    <DataListItem id={`${account.providerAlias}-idp`} key={account.providerName} aria-labelledby=\"simple-item1\">\r\n                        <DataListItemRow key={account.providerName}>\r\n                            <DataListItemCells\r\n                                dataListCells={[\r\n                                    <DataListCell key='idp'><Stack><StackItem isFilled>{this.findIcon(account)}</StackItem><StackItem id={`${account.providerAlias}-idp-name`} isFilled><h2><strong>{account.displayName}</strong></h2></StackItem></Stack></DataListCell>,\r\n                                    <DataListCell key='badge'><Stack><StackItem isFilled/><StackItem id={`${account.providerAlias}-idp-badge`} isFilled>{this.badge(account)}</StackItem></Stack></DataListCell>,\r\n                                    <DataListCell key='username'><Stack><StackItem isFilled/><StackItem id={`${account.providerAlias}-idp-username`} isFilled>{account.linkedUsername}</StackItem></Stack></DataListCell>,\r\n                                ]}/>\r\n                            <DataListAction aria-labelledby='foo' aria-label='foo action' id='setPasswordAction'>\r\n                                {isLinked && <Button id={`${account.providerAlias}-idp-unlink`} variant='link' onClick={() => this.unLinkAccount(account)}><UnlinkIcon size='sm'/> <Msg msgKey='unLink'/></Button>}\r\n                                {!isLinked && <Button id={`${account.providerAlias}-idp-link`} variant='link' onClick={() => this.linkAccount(account)}><LinkIcon size='sm'/> <Msg msgKey='link'/></Button>}\r\n                            </DataListAction>\r\n                        </DataListItemRow>\r\n                    </DataListItem>\r\n                ))\r\n\r\n            } </>\r\n\r\n        )\r\n    }\r\n\r\n    private badge(account: LinkedAccount): React.ReactNode {\r\n        if (account.social) {\r\n            return (<Badge><Msg msgKey='socialLogin'/></Badge>);\r\n        }\r\n\r\n        return (<Badge style={{backgroundColor: \"green\"}} ><Msg msgKey='systemDefined'/></Badge>);\r\n    }\r\n\r\n    private findIcon(account: LinkedAccount): React.ReactNode {\r\n        const socialIconId = `${account.providerAlias}-idp-icon-social`;\r\n        if (account.providerName.toLowerCase().includes('github')) return (<GithubIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('linkedin')) return (<LinkedinIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('facebook')) return (<FacebookIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('google')) return (<GoogleIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('instagram')) return (<InstagramIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('microsoft')) return (<MicrosoftIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('bitbucket')) return (<BitbucketIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('twitter')) return (<TwitterIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('openshift')) return (<OpenshiftIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('gitlab')) return (<GitlabIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('paypal')) return (<PaypalIcon id={socialIconId} size='xl'/>);\r\n        if (account.providerName.toLowerCase().includes('stackoverflow')) return (<StackOverflowIcon id={socialIconId} size='xl'/>);\r\n\r\n        return (<CubeIcon id={`${account.providerAlias}-idp-icon-default`} size='xl'/>);\r\n    }\r\n\r\n};\r\n\r\nconst LinkedAccountsPagewithRouter = withRouter(LinkedAccountsPage);\r\nexport {LinkedAccountsPagewithRouter as LinkedAccountsPage};"],"file":"LinkedAccountsPage.js"}