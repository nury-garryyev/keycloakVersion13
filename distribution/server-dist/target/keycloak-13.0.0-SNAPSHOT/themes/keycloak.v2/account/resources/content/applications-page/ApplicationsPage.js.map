{"version":3,"sources":["../../../src/app/content/applications-page/ApplicationsPage.tsx"],"names":["React","DataList","DataListItem","DataListItemRow","DataListCell","DataListToggle","DataListContent","DataListItemCells","Grid","GridItem","Button","InfoAltIcon","CheckIcon","ExternalLinkAltIcon","ContentPage","ContinueCancelModal","AccountServiceContext","Msg","ApplicationsPage","Component","constructor","props","context","clientId","doDelete","then","fetchApplications","row","newIsRowOpen","state","isRowOpen","setState","applications","doGet","response","data","Array","length","fill","elementId","item","application","render","localize","visibility","map","appIndex","onToggle","window","open","effectiveUrl","clientName","userConsentRequired","offlineAccess","inUse","description","split","consent","grantedScopes","scope","scopeIndex","name","Intl","DateTimeFormat","locale","year","month","day","hour","minute","second","format","createDate","removeConsent"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as React from 'react';\r\n\r\nimport {\r\n  DataList,\r\n  DataListItem,\r\n  DataListItemRow,\r\n  DataListCell,\r\n  DataListToggle,\r\n  DataListContent,\r\n  DataListItemCells,\r\n  Grid,\r\n  GridItem,\r\n  Button,\r\n} from '@patternfly/react-core';\r\n\r\nimport { InfoAltIcon, CheckIcon, BuilderImageIcon, ExternalLinkAltIcon } from '@patternfly/react-icons';\r\nimport { ContentPage } from '../ContentPage';\r\nimport { ContinueCancelModal } from '../../widgets/ContinueCancelModal';\r\nimport { HttpResponse } from '../../account-service/account.service';\r\nimport { AccountServiceContext } from '../../account-service/AccountServiceContext';\r\nimport { Msg } from '../../widgets/Msg';\r\n\r\ndeclare const locale: string;\r\n\r\nexport interface ApplicationsPageProps {\r\n}\r\n\r\nexport interface ApplicationsPageState {\r\n  isRowOpen: boolean[];\r\n  applications: Application[];\r\n}\r\n\r\nexport interface GrantedScope {\r\n  displayTest: string;\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Consent {\r\n  createDate: number;\r\n  grantedScopes: GrantedScope[];\r\n  lastUpdatedDate: number;\r\n}\r\n\r\ninterface Application {\r\n  effectiveUrl: string;\r\n  clientId: string;\r\n  clientName: string;\r\n  consent: Consent;\r\n  description: string;\r\n  inUse: boolean;\r\n  offlineAccess: boolean;\r\n  userConsentRequired: boolean;\r\n  scope: string[];\r\n}\r\n\r\nexport class ApplicationsPage extends React.Component<ApplicationsPageProps, ApplicationsPageState> {\r\n  static contextType = AccountServiceContext;\r\n  context: React.ContextType<typeof AccountServiceContext>;\r\n\r\n  public constructor(props: ApplicationsPageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n    super(props);\r\n    this.context = context;\r\n    this.state = {\r\n      isRowOpen: [],\r\n      applications: []\r\n    };\r\n\r\n    this.fetchApplications();\r\n  }\r\n\r\n  private removeConsent = (clientId: string) => {\r\n    this.context!.doDelete(\"/applications/\" + clientId + \"/consent\")\r\n      .then(() => {\r\n        this.fetchApplications();\r\n      });\r\n  }\r\n\r\n  private onToggle = (row: number): void => {\r\n    const newIsRowOpen: boolean[] = this.state.isRowOpen;\r\n    newIsRowOpen[row] = !newIsRowOpen[row];\r\n    this.setState({ isRowOpen: newIsRowOpen });\r\n  };\r\n\r\n  private fetchApplications(): void {\r\n    this.context!.doGet<Application[]>(\"/applications\")\r\n      .then((response: HttpResponse<Application[]>) => {\r\n        const applications = response.data || [];\r\n        this.setState({\r\n          isRowOpen: new Array(applications.length).fill(false),\r\n          applications: applications\r\n        });\r\n      });\r\n  }\r\n\r\n  private elementId(item: string, application: Application): string {\r\n    return `application-${item}-${application.clientId}`;\r\n  }\r\n\r\n  public render(): React.ReactNode {\r\n    return (\r\n      <ContentPage title={Msg.localize('applicationsPageTitle')}>\r\n        <DataList id=\"applications-list\" aria-label={Msg.localize('applicationsPageTitle')} isCompact>\r\n          <DataListItem id=\"applications-list-header\" aria-labelledby=\"Columns names\">\r\n            <DataListItemRow>\r\n              // invisible toggle allows headings to line up properly\r\n              <span style={{ visibility: 'hidden' }}>\r\n                <DataListToggle\r\n                  isExpanded={false}\r\n                  id='applications-list-header-invisible-toggle'\r\n                  aria-controls=\"hidden\"\r\n                />\r\n              </span>\r\n              <DataListItemCells\r\n                dataListCells={[\r\n                  <DataListCell key='applications-list-client-id-header' width={2}>\r\n                    <strong><Msg msgKey='applicationName' /></strong>\r\n                  </DataListCell>,\r\n                  <DataListCell key='applications-list-app-type-header' width={2}>\r\n                    <strong><Msg msgKey='applicationType' /></strong>\r\n                  </DataListCell>,\r\n                  <DataListCell key='applications-list-status' width={2}>\r\n                    <strong><Msg msgKey='status' /></strong>\r\n                  </DataListCell>,\r\n                ]}\r\n              />\r\n            </DataListItemRow>\r\n          </DataListItem>\r\n          {this.state.applications.map((application: Application, appIndex: number) => {\r\n            return (\r\n              <DataListItem id={this.elementId(\"client-id\", application)} key={'application-' + appIndex} aria-labelledby=\"applications-list\" isExpanded={this.state.isRowOpen[appIndex]}>\r\n                <DataListItemRow>\r\n                  <DataListToggle\r\n                    onClick={() => this.onToggle(appIndex)}\r\n                    isExpanded={this.state.isRowOpen[appIndex]}\r\n                    id={this.elementId('toggle', application)}\r\n                    aria-controls={this.elementId(\"expandable\", application)}\r\n                  />\r\n                  <DataListItemCells\r\n                    dataListCells={[\r\n                      <DataListCell id={this.elementId('name', application)} width={2} key={'app-' + appIndex}>\r\n                        <Button component=\"a\" variant=\"link\" onClick={() => window.open(application.effectiveUrl)}>\r\n                          {application.clientName || application.clientId} <ExternalLinkAltIcon/>\r\n                        </Button>\r\n                      </DataListCell>,\r\n                      <DataListCell id={this.elementId('internal', application)} width={2} key={'internal-' + appIndex}>\r\n                        {application.userConsentRequired ? Msg.localize('thirdPartyApp') : Msg.localize('internalApp')}\r\n                        {application.offlineAccess ? ', ' + Msg.localize('offlineAccess') : ''}\r\n                      </DataListCell>,\r\n                      <DataListCell id={this.elementId('status', application)} width={2} key={'status-' + appIndex}>\r\n                        {application.inUse ? Msg.localize('inUse') : Msg.localize('notInUse')}\r\n                      </DataListCell>\r\n                    ]}\r\n                  />\r\n                </DataListItemRow>\r\n                <DataListContent\r\n                  noPadding={false}\r\n                  aria-label={Msg.localize('applicationDetails')}\r\n                  id={this.elementId(\"expandable\", application)}\r\n                  isHidden={!this.state.isRowOpen[appIndex]}\r\n                >\r\n                  <Grid sm={12} md={12} lg={12}>\r\n                    <div className='pf-c-content'>\r\n                      <GridItem><strong>{Msg.localize('client') + ': '}</strong> {application.clientId}</GridItem>\r\n                      {application.description &&\r\n                        <GridItem><strong>{Msg.localize('description') + ': '}</strong> {application.description}</GridItem>\r\n                      }\r\n                      <GridItem><strong>URL: </strong> <span id={this.elementId('effectiveurl', application)}>{application.effectiveUrl.split('\"')}</span></GridItem>\r\n                      {application.consent &&\r\n                        <React.Fragment>\r\n                          <GridItem span={12}>\r\n                            <strong>Has access to:</strong>\r\n                          </GridItem>\r\n                          {application.consent.grantedScopes.map((scope: GrantedScope, scopeIndex: number) => {\r\n                            return (\r\n                              <React.Fragment key={'scope-' + scopeIndex} >\r\n                                <GridItem offset={1}><CheckIcon /> {scope.name}</GridItem>\r\n                              </React.Fragment>\r\n                            )\r\n                          })}\r\n                          <GridItem><strong>{Msg.localize('accessGrantedOn') + ': '}</strong>\r\n                            {new Intl.DateTimeFormat(locale, {\r\n                              year: 'numeric',\r\n                              month: 'long',\r\n                              day: 'numeric',\r\n                              hour: 'numeric',\r\n                              minute: 'numeric',\r\n                              second: 'numeric'\r\n                            }).format(application.consent.createDate)}\r\n                          </GridItem>\r\n                        </React.Fragment>\r\n                      }\r\n                    </div>\r\n                  </Grid>\r\n                  {(application.consent || application.offlineAccess) &&\r\n                    <Grid gutter='sm'>\r\n                      <hr />\r\n                      <GridItem>\r\n                        <React.Fragment>\r\n                          <ContinueCancelModal\r\n                            buttonTitle={Msg.localize('removeButton')} // required\r\n                            buttonVariant='secondary' // defaults to 'primary'\r\n                            modalTitle={Msg.localize('removeModalTitle')} // required\r\n                            modalMessage={Msg.localize('removeModalMessage', [application.clientId])}\r\n                            modalContinueButtonLabel={Msg.localize('confirmButton')} // defaults to 'Continue'\r\n                            onContinue={() => this.removeConsent(application.clientId)} // required\r\n                          />\r\n                        </React.Fragment>\r\n                      </GridItem>\r\n                      <GridItem><InfoAltIcon /> {Msg.localize('infoMessage')}</GridItem>\r\n                    </Grid>\r\n                  }\r\n                </DataListContent>\r\n              </DataListItem>\r\n            )\r\n          })}\r\n        </DataList>\r\n      </ContentPage>\r\n    );\r\n  }\r\n};\r\n"],"file":"ApplicationsPage.js"}