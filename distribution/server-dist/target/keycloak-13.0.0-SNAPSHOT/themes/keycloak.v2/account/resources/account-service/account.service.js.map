{"version":3,"sources":["../../src/app/account-service/account.service.ts"],"names":["ContentAlert","AccountServiceError","Error","constructor","response","statusText","AccountServiceClient","keycloakService","kcSvc","accountUrl","authServerUrl","realm","doGet","endpoint","config","doRequest","method","doDelete","doPost","body","JSON","stringify","doPut","fetch","makeUrl","toString","makeConfig","data","json","e","ok","handleError","status","login","window","location","href","baseUrl","danger","startsWith","URL","url","hasOwnProperty","params","Object","keys","forEach","key","searchParams","append","Promise","resolve","getToken","then","token","headers","Authorization","catch","addEventListener","event","promise","error","preventDefault"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2018 Red Hat Inc. and/or its affiliates and other contributors\r\n * as indicated by the @author tags. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\n * use this file except in compliance with the License. You may obtain a copy of\r\n * the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\n * License for the specific language governing permissions and limitations under\r\n * the License.\r\n */\r\n\r\nimport {KeycloakService} from '../keycloak-service/keycloak.service';\r\nimport {ContentAlert} from '../content/ContentAlert';\r\n\r\ndeclare const baseUrl: string;\r\n\r\ntype ConfigResolve = (config: RequestInit) => void;\r\n\r\nexport interface HttpResponse<T = {}> extends Response {\r\n    data?: T;\r\n}\r\n\r\nexport interface RequestInitWithParams extends RequestInit {\r\n    params?: {[name: string]: string | number};\r\n}\r\n\r\nexport class AccountServiceError extends Error {\r\n    constructor(public response: HttpResponse) {\r\n        super(response.statusText);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\r\n */\r\nexport class AccountServiceClient {\r\n    private kcSvc: KeycloakService;\r\n    private accountUrl: string;\r\n\r\n    public constructor(keycloakService: KeycloakService) {\r\n        this.kcSvc = keycloakService;\r\n        this.accountUrl = this.kcSvc.authServerUrl() + 'realms/' + this.kcSvc.realm() + '/account';\r\n    }\r\n\r\n    public async doGet<T>(endpoint: string,\r\n                          config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, method: 'get'});\r\n    }\r\n\r\n    public async doDelete<T>(endpoint: string,\r\n                            config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, method: 'delete'});\r\n    }\r\n\r\n    public async doPost<T>(endpoint: string,\r\n                          body: string | {},\r\n                          config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, body: JSON.stringify(body), method: 'post'});\r\n    }\r\n\r\n    public async doPut<T>(endpoint: string,\r\n                         body: string | {},\r\n                         config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n        return this.doRequest(endpoint, {...config, body: JSON.stringify(body), method: 'put'});\r\n    }\r\n\r\n    public async doRequest<T>(endpoint: string,\r\n                              config?: RequestInitWithParams): Promise<HttpResponse<T>> {\r\n\r\n        const response: HttpResponse<T> = await fetch(this.makeUrl(endpoint, config).toString(),\r\n                                                      await this.makeConfig(config));\r\n\r\n        try {\r\n            response.data = await response.json();\r\n        } catch (e) {} // ignore.  Might be empty\r\n\r\n        if (!response.ok) {\r\n            this.handleError(response);\r\n            throw new AccountServiceError(response);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private handleError(response: HttpResponse): void {\r\n        if (response !== null && response.status === 401) {\r\n            // session timed out?\r\n            this.kcSvc.login();\r\n        }\r\n\r\n        if (response !== null && response.status === 403) {\r\n            window.location.href = baseUrl + '/#/forbidden';\r\n        }\r\n\r\n        if (response !== null && response.data != null) {\r\n            ContentAlert.danger(\r\n                `${response.statusText}: ${response.data['errorMessage'] ? response.data['errorMessage'] : ''} ${response.data['error'] ? response.data['error'] : ''}`\r\n            );\r\n        } else {\r\n            ContentAlert.danger(response.statusText);\r\n        }\r\n    }\r\n\r\n    private makeUrl(endpoint: string, config?: RequestInitWithParams): URL {\r\n        if (endpoint.startsWith('http')) return new URL(endpoint);\r\n        const url = new URL(this.accountUrl + endpoint);\r\n\r\n        // add request params\r\n        if (config && config.hasOwnProperty('params')) {\r\n            const params: {[name: string]: string} = config.params as {} || {};\r\n            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    private makeConfig(config: RequestInit = {}): Promise<RequestInit> {\r\n        return new Promise( (resolve: ConfigResolve) => {\r\n            this.kcSvc.getToken()\r\n                .then( (token: string) => {\r\n                    resolve( {\r\n                        ...config,\r\n                        headers: {'Content-Type': 'application/json',\r\n                                 ...config.headers,\r\n                                  Authorization: 'Bearer ' + token}\r\n                    });\r\n                }).catch(() => {\r\n                    this.kcSvc.login();\r\n                });\r\n        });\r\n    }\r\n\r\n}\r\n\r\nwindow.addEventListener(\"unhandledrejection\", (event: PromiseRejectionEvent) => {\r\n    event.promise.catch(error => {\r\n        if (error instanceof AccountServiceError) {\r\n            // We already handled the error. Ignore unhandled rejection.\r\n            event.preventDefault();\r\n        }\r\n    });\r\n});"],"file":"account.service.js"}