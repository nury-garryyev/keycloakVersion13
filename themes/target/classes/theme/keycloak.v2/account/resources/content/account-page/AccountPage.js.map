{"version":3,"sources":["../../../src/app/content/account-page/AccountPage.tsx"],"names":["React","ActionGroup","Button","Form","FormGroup","TextInput","Grid","GridItem","Expandable","AccountServiceContext","Msg","ContentPage","ContentAlert","LocaleSelector","KeycloakContext","AIACommand","AccountPage","Component","constructor","props","context","features","isRegistrationEmailAsUsername","isEditUserNameAllowed","deleteAccountAllowed","errors","username","firstName","lastName","email","formFields","attributes","DEFAULT_STATE","fetchPersonalInfo","value","event","target","currentTarget","name","setState","state","validationMessage","preventDefault","form","isValid","checkValidity","reqData","doPost","then","success","locale","window","location","reload","formData","FormData","validationMessages","Array","from","keys","reduce","acc","key","elements","keycloak","execute","handleChange","doGet","response","data","render","fields","handleSubmit","localize","isInternationalizationEnabled","Object","values","filter","e","length","handleCancel","isDeleteAccountAllowed","marginTop","handleDelete"],"mappings":";;AAAA;;;;;;;;;;;;;;;AAeA,OAAO,KAAKA,KAAZ;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,IAA9B,EAAoCC,SAApC,EAA+CC,SAA/C,EAA0DC,IAA1D,EAAgEC,QAAhE,EAA0EC,UAA1E;AAGA,SAASC,qBAAT;AAEA,SAASC,GAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,SAASC,cAAT;AACA,SAASC,eAAT;AAEA,SAASC,UAAT;;AAqBA;;;AAGA,OAAO,MAAMC,WAAN,SAA0BhB,KAAK,CAACiB,SAAhC,CAA8E;AAwB1EC,EAAAA,WAAP,CAAmBC,KAAnB,EAA4CC,OAA5C,EAAsG;AAClG,UAAMD,KAAN;;AADkG;;AAAA,2DArBrDE,QAAQ,CAACC,6BAqB4C;;AAAA,mDApB7DD,QAAQ,CAACE,qBAoBoD;;AAAA,oDAnB5DF,QAAQ,CAACG,oBAmBmD;;AAAA,2CAlBnD;AAC/CC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAE,EADN;AAEJC,QAAAA,SAAS,EAAE,EAFP;AAGJC,QAAAA,QAAQ,EAAE,EAHN;AAIJC,QAAAA,KAAK,EAAE;AAJH,OADuC;AAO/CC,MAAAA,UAAU,EAAE;AACRJ,QAAAA,QAAQ,EAAE,EADF;AAERC,QAAAA,SAAS,EAAE,EAFH;AAGRC,QAAAA,QAAQ,EAAE,EAHF;AAIRC,QAAAA,KAAK,EAAE,EAJC;AAKRE,QAAAA,UAAU,EAAE;AALJ;AAPmC,KAkBmD;;AAAA,mCAFrE,KAAKC,aAEgE;;AAAA,0CAuB/E,MAAY;AAC/B,WAAKC,iBAAL;AACH,KAzBqG;;AAAA,0CA2B/E,CAACC,KAAD,EAAgBC,KAAhB,KAA6D;AAChF,YAAMC,MAAM,GAAGD,KAAK,CAACE,aAArB;AACA,YAAMC,IAAI,GAAGF,MAAM,CAACE,IAApB;AAEA,WAAKC,QAAL,CAAc;AACVd,QAAAA,MAAM,EAAE,EAAE,GAAG,KAAKe,KAAL,CAAWf,MAAhB;AAAwB,WAACa,IAAD,GAAQF,MAAM,CAACK;AAAvC,SADE;AAEVX,QAAAA,UAAU,EAAE,EAAE,GAAG,KAAKU,KAAL,CAAWV,UAAhB;AAA4B,WAACQ,IAAD,GAAQJ;AAApC;AAFF,OAAd;AAIH,KAnCqG;;AAAA,0CAqC9EC,KAAD,IAAmD;AACtEA,MAAAA,KAAK,CAACO,cAAN;AACA,YAAMC,IAAI,GAAGR,KAAK,CAACC,MAAnB;AACA,YAAMQ,OAAO,GAAGD,IAAI,CAACE,aAAL,EAAhB;;AACA,UAAID,OAAJ,EAAa;AACT,cAAME,OAAmB,GAAG,EAAE,GAAG,KAAKN,KAAL,CAAWV;AAAhB,SAA5B;AACA,aAAKV,OAAL,CAAc2B,MAAd,CAA2B,GAA3B,EAAgCD,OAAhC,EACKE,IADL,CACU,MAAM;AACRpC,UAAAA,YAAY,CAACqC,OAAb,CAAqB,uBAArB;;AACA,cAAIC,MAAM,KAAK,KAAKV,KAAL,CAAWV,UAAX,CAAsBC,UAAtB,CAAkCmB,MAAlC,CAA0C,CAA1C,CAAf,EAA6D;AACzDC,YAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;AACJ,SANL;AAOH,OATD,MASO;AACH,cAAMC,QAAQ,GAAG,IAAIC,QAAJ,CAAaZ,IAAb,CAAjB;AACA,cAAMa,kBAAkB,GAAGC,KAAK,CAACC,IAAN,CAAWJ,QAAQ,CAACK,IAAT,EAAX,EAA4BC,MAA5B,CAAmC,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxED,UAAAA,GAAG,CAACC,GAAD,CAAH,GAAWnB,IAAI,CAACoB,QAAL,CAAcD,GAAd,EAAmBrB,iBAA9B;AACA,iBAAOoB,GAAP;AACH,SAH0B,EAGxB,EAHwB,CAA3B;AAIA,aAAKtB,QAAL,CAAc;AACVd,UAAAA,MAAM,EAAE,EAAE,GAAG+B;AAAL,WADE;AAEV1B,UAAAA,UAAU,EAAE,KAAKU,KAAL,CAAWV;AAFb,SAAd;AAIH;AAEJ,KA9DqG;;AAAA,0CAgE9EkC,QAAD,IAAqC;AACxD,UAAIjD,UAAJ,CAAeiD,QAAf,EAAyB,gBAAzB,EAA2CC,OAA3C;AACH,KAlEqG;;AAAA,2CAyM9E,MACpB,oBAAC,SAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,EAAE,EAAC,WAHP;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,SAAS,EAAE,GALf;AAMI,MAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWV,UAAX,CAAsBJ,QANjC;AAOI,MAAA,QAAQ,EAAE,KAAKwC,YAPnB;AAQI,MAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWf,MAAX,CAAkBC,QAAlB,KAA+B;AAR5C,MA1MkG;;AAAA,qDAuNpE,MAC9B,oBAAC,SAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,EAAE,EAAC,WAHP;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,KAAK,EAAE,KAAKc,KAAL,CAAWV,UAAX,CAAsBJ;AALjC,MAxNkG;;AAElG,SAAKN,OAAL,GAAeA,OAAf;AAEA,SAAKa,iBAAL;AACH;;AAEOA,EAAAA,iBAAR,GAAkC;AAC9B,SAAKb,OAAL,CAAc+C,KAAd,CAAgC,GAAhC,EACKnB,IADL,CACWoB,QAAD,IAAwC;AAC1C,WAAK7B,QAAL,CAAc,KAAKP,aAAnB;AACA,YAAMF,UAAU,GAAGsC,QAAQ,CAACC,IAA5B;;AACA,UAAI,CAACvC,UAAU,CAAEC,UAAjB,EAA6B;AACzBD,QAAAA,UAAU,CAAEC,UAAZ,GAAyB;AAAEmB,UAAAA,MAAM,EAAE,CAACA,MAAD;AAAV,SAAzB;AACH,OAFD,MAGK,IAAI,CAACpB,UAAU,CAAEC,UAAZ,CAAuBmB,MAA5B,EAAoC;AACrCpB,QAAAA,UAAU,CAAEC,UAAZ,CAAuBmB,MAAvB,GAAgC,CAACA,MAAD,CAAhC;AACH;;AAED,WAAKX,QAAL,CAAc,EAAC,GAAG;AAAET,UAAAA,UAAU,EAAEA;AAAd;AAAJ,OAAd;AACH,KAZL;AAaH;;AA+CMwC,EAAAA,MAAP,GAAiC;AAC7B,UAAMC,MAAkB,GAAG,KAAK/B,KAAL,CAAWV,UAAtC;AACA,WACI,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAC,uBAAnB;AACI,MAAA,YAAY,EAAC;AADjB,OAEI,oBAAC,IAAD;AAAM,MAAA,YAAY,MAAlB;AAAmB,MAAA,QAAQ,EAAEK,KAAK,IAAI,KAAKqC,YAAL,CAAkBrC,KAAlB;AAAtC,OACK,CAAC,KAAKb,6BAAN,IACG,oBAAC,SAAD;AACI,MAAA,KAAK,EAAEZ,GAAG,CAAC+D,QAAJ,CAAa,UAAb,CADX;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,OAAO,EAAC,WAHZ;AAII,MAAA,iBAAiB,EAAE,KAAKjC,KAAL,CAAWf,MAAX,CAAkBC,QAJzC;AAKI,MAAA,OAAO,EAAE,KAAKc,KAAL,CAAWf,MAAX,CAAkBC,QAAlB,KAA+B;AAL5C,OAOK,KAAKH,qBAAL,IAA8B,yBAAM,aAAN,OAPnC,EAQK,CAAC,KAAKA,qBAAN,IAA+B,yBAAM,uBAAN,OARpC,CAFR,EAaI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAEb,GAAG,CAAC+D,QAAJ,CAAa,OAAb,CADX;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,OAAO,EAAC,eAHZ;AAII,MAAA,iBAAiB,EAAE,KAAKjC,KAAL,CAAWf,MAAX,CAAkBI,KAJzC;AAKI,MAAA,OAAO,EAAE,KAAKW,KAAL,CAAWf,MAAX,CAAkBI,KAAlB,KAA4B;AALzC,OAOI,oBAAC,SAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,EAAE,EAAC,eAHP;AAII,MAAA,IAAI,EAAC,OAJT;AAKI,MAAA,SAAS,EAAE,GALf;AAMI,MAAA,KAAK,EAAE0C,MAAM,CAAC1C,KANlB;AAOI,MAAA,QAAQ,EAAE,KAAKqC,YAPnB;AAQI,MAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWf,MAAX,CAAkBI,KAAlB,KAA4B;AARzC,MAPJ,CAbJ,EAgCI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAEnB,GAAG,CAAC+D,QAAJ,CAAa,WAAb,CADX;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,OAAO,EAAC,YAHZ;AAII,MAAA,iBAAiB,EAAE,KAAKjC,KAAL,CAAWf,MAAX,CAAkBE,SAJzC;AAKI,MAAA,OAAO,EAAE,KAAKa,KAAL,CAAWf,MAAX,CAAkBE,SAAlB,KAAgC;AAL7C,OAOI,oBAAC,SAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,EAAE,EAAC,YAHP;AAII,MAAA,IAAI,EAAC,WAJT;AAKI,MAAA,SAAS,EAAE,GALf;AAMI,MAAA,KAAK,EAAE4C,MAAM,CAAC5C,SANlB;AAOI,MAAA,QAAQ,EAAE,KAAKuC,YAPnB;AAQI,MAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWf,MAAX,CAAkBE,SAAlB,KAAgC;AAR7C,MAPJ,CAhCJ,EAmDI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAEjB,GAAG,CAAC+D,QAAJ,CAAa,UAAb,CADX;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,OAAO,EAAC,WAHZ;AAII,MAAA,iBAAiB,EAAE,KAAKjC,KAAL,CAAWf,MAAX,CAAkBG,QAJzC;AAKI,MAAA,OAAO,EAAE,KAAKY,KAAL,CAAWf,MAAX,CAAkBG,QAAlB,KAA+B;AAL5C,OAOI,oBAAC,SAAD;AACI,MAAA,UAAU,MADd;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,EAAE,EAAC,WAHP;AAII,MAAA,IAAI,EAAC,UAJT;AAKI,MAAA,SAAS,EAAE,GALf;AAMI,MAAA,KAAK,EAAE2C,MAAM,CAAC3C,QANlB;AAOI,MAAA,QAAQ,EAAE,KAAKsC,YAPnB;AAQI,MAAA,OAAO,EAAE,KAAK1B,KAAL,CAAWf,MAAX,CAAkBG,QAAlB,KAA+B;AAR5C,MAPJ,CAnDJ,EAsEKP,QAAQ,CAACqD,6BAAT,IAA0C,oBAAC,SAAD;AACvC,MAAA,KAAK,EAAEhE,GAAG,CAAC+D,QAAJ,CAAa,cAAb,CADgC;AAEvC,MAAA,UAAU,MAF6B;AAGvC,MAAA,OAAO,EAAC;AAH+B,OAKvC,oBAAC,cAAD;AAAgB,MAAA,EAAE,EAAC,iBAAnB;AACI,MAAA,KAAK,EAAEF,MAAM,CAACxC,UAAP,CAAmBmB,MAAnB,IAA6B,EADxC;AAEI,MAAA,QAAQ,EAAEhB,KAAK,IAAI,KAAKK,QAAL,CAAc;AAC7Bd,QAAAA,MAAM,EAAE,KAAKe,KAAL,CAAWf,MADU;AAE7BK,QAAAA,UAAU,EAAE,EAAE,GAAG,KAAKU,KAAL,CAAWV,UAAhB;AAA4BC,UAAAA,UAAU,EAAE,EAAE,GAAG,KAAKS,KAAL,CAAWV,UAAX,CAAsBC,UAA3B;AAAuCmB,YAAAA,MAAM,EAAE,CAAChB,KAAD;AAA/C;AAAxC;AAFiB,OAAd;AAFvB,MALuC,CAtE/C,EAmFI,oBAAC,WAAD,QACI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAC,QADT;AAEI,MAAA,EAAE,EAAC,UAFP;AAGI,MAAA,OAAO,EAAC,SAHZ;AAII,MAAA,UAAU,EAAEyC,MAAM,CAACC,MAAP,CAAc,KAAKpC,KAAL,CAAWf,MAAzB,EAAiCoD,MAAjC,CAAwCC,CAAC,IAAIA,CAAC,KAAK,EAAnD,EAAuDC,MAAvD,KAAkE;AAJlF,OAMI,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAC;AAAZ,MANJ,CADJ,EASI,oBAAC,MAAD;AACI,MAAA,EAAE,EAAC,YADP;AAEI,MAAA,OAAO,EAAC,WAFZ;AAGI,MAAA,OAAO,EAAE,KAAKC;AAHlB,OAKI,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAC;AAAZ,MALJ,CATJ,CAnFJ,CAFJ,EAwGC,KAAKC,sBAAL,IACD;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAyB,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAC;AAAX;AAAhC,OACC,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAC;AAAvB,OACI,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAE;AAAd,OACO,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE;AAAhB,OACK,+BACG,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAC;AAAZ,MADH,CADL,CADP,EAMO,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE;AAAhB,OACI,oBAAC,eAAD,CAAiB,QAAjB,QACOlB,QAAD,IACM,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,oBAAX;AAAgC,MAAA,OAAO,EAAC,QAAxC;AAAiD,MAAA,OAAO,EAAE,MAAM,KAAKmB,YAAL,CAAkBnB,QAAlB,CAAhE;AAA6F,MAAA,SAAS,EAAC;AAAvG,OAAuH,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAC;AAAZ,MAAvH,CAFZ,CADJ,CANP,EAaO,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE;AAAhB,MAbP,CADJ,CADD,CAzGA,CADJ;AAiIH;;AA/NgF;;gBAAxEhD,W,iBACYP,qB;;AAwPxB","sourcesContent":["/*\r\n * Copyright 2018 Red Hat, Inc. and/or its affiliates.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport * as React from 'react';\r\nimport { ActionGroup, Button, Form, FormGroup, TextInput, Grid, GridItem, Expandable} from '@patternfly/react-core';\r\n\r\nimport { HttpResponse } from '../../account-service/account.service';\r\nimport { AccountServiceContext } from '../../account-service/AccountServiceContext';\r\nimport { Features } from '../../widgets/features';\r\nimport { Msg } from '../../widgets/Msg';\r\nimport { ContentPage } from '../ContentPage';\r\nimport { ContentAlert } from '../ContentAlert';\r\nimport { LocaleSelector } from '../../widgets/LocaleSelectors';\r\nimport { KeycloakContext } from '../../keycloak-service/KeycloakContext';\r\nimport { KeycloakService } from '../../keycloak-service/keycloak.service';\r\nimport { AIACommand } from '../../util/AIACommand';\r\n\r\ndeclare const features: Features;\r\ndeclare const locale: string;\r\n\r\ninterface AccountPageProps {\r\n}\r\n\r\ninterface FormFields {\r\n    readonly username?: string;\r\n    readonly firstName?: string;\r\n    readonly lastName?: string;\r\n    readonly email?: string;\r\n    attributes?: { locale?: [string] };\r\n}\r\n\r\ninterface AccountPageState {\r\n    readonly errors: FormFields;\r\n    readonly formFields: FormFields;\r\n}\r\n\r\n/**\r\n * @author Stan Silvert ssilvert@redhat.com (C) 2018 Red Hat Inc.\r\n */\r\nexport class AccountPage extends React.Component<AccountPageProps, AccountPageState> {\r\n    static contextType = AccountServiceContext;\r\n    context: React.ContextType<typeof AccountServiceContext>;\r\n    private isRegistrationEmailAsUsername: boolean = features.isRegistrationEmailAsUsername;\r\n    private isEditUserNameAllowed: boolean = features.isEditUserNameAllowed;\r\n    private isDeleteAccountAllowed: boolean = features.deleteAccountAllowed;\r\n    private readonly DEFAULT_STATE: AccountPageState = {\r\n        errors: {\r\n            username: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: ''\r\n        },\r\n        formFields: {\r\n            username: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            attributes: {}\r\n        }\r\n    };\r\n\r\n    public state: AccountPageState = this.DEFAULT_STATE;\r\n\r\n    public constructor(props: AccountPageProps, context: React.ContextType<typeof AccountServiceContext>) {\r\n        super(props);\r\n        this.context = context;\r\n\r\n        this.fetchPersonalInfo();\r\n    }\r\n\r\n    private fetchPersonalInfo(): void {\r\n        this.context!.doGet<FormFields>(\"/\")\r\n            .then((response: HttpResponse<FormFields>) => {\r\n                this.setState(this.DEFAULT_STATE);\r\n                const formFields = response.data;\r\n                if (!formFields!.attributes) {\r\n                    formFields!.attributes = { locale: [locale] };\r\n                }\r\n                else if (!formFields!.attributes.locale) {\r\n                    formFields!.attributes.locale = [locale];\r\n                }\r\n\r\n                this.setState({...{ formFields: formFields as FormFields }});\r\n            });\r\n    }\r\n\r\n    private handleCancel = (): void => {\r\n        this.fetchPersonalInfo();\r\n    }\r\n\r\n    private handleChange = (value: string, event: React.FormEvent<HTMLInputElement>) => {\r\n        const target = event.currentTarget;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            errors: { ...this.state.errors, [name]: target.validationMessage },\r\n            formFields: { ...this.state.formFields, [name]: value }\r\n        });\r\n    }\r\n\r\n    private handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        const form = event.target as HTMLFormElement;\r\n        const isValid = form.checkValidity();\r\n        if (isValid) {\r\n            const reqData: FormFields = { ...this.state.formFields };\r\n            this.context!.doPost<void>(\"/\", reqData)\r\n                .then(() => {\r\n                    ContentAlert.success('accountUpdatedMessage');\r\n                    if (locale !== this.state.formFields.attributes!.locale![0]) {\r\n                        window.location.reload();\r\n                    }\r\n                });\r\n        } else {\r\n            const formData = new FormData(form);\r\n            const validationMessages = Array.from(formData.keys()).reduce((acc, key) => {\r\n                acc[key] = form.elements[key].validationMessage\r\n                return acc\r\n            }, {});\r\n            this.setState({\r\n                errors: { ...validationMessages },\r\n                formFields: this.state.formFields\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    private handleDelete = (keycloak: KeycloakService): void => {\r\n        new AIACommand(keycloak, \"delete_account\").execute();\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const fields: FormFields = this.state.formFields;\r\n        return (\r\n            <ContentPage title=\"personalInfoHtmlTitle\"\r\n                introMessage=\"personalSubMessage\">\r\n                <Form isHorizontal onSubmit={event => this.handleSubmit(event)}>\r\n                    {!this.isRegistrationEmailAsUsername &&\r\n                        <FormGroup\r\n                            label={Msg.localize('username')}\r\n                            isRequired\r\n                            fieldId=\"user-name\"\r\n                            helperTextInvalid={this.state.errors.username}\r\n                            isValid={this.state.errors.username === ''}\r\n                        >\r\n                            {this.isEditUserNameAllowed && <this.UsernameInput />}\r\n                            {!this.isEditUserNameAllowed && <this.RestrictedUsernameInput />}\r\n                        </FormGroup>\r\n                    }\r\n                    <FormGroup\r\n                        label={Msg.localize('email')}\r\n                        isRequired\r\n                        fieldId=\"email-address\"\r\n                        helperTextInvalid={this.state.errors.email}\r\n                        isValid={this.state.errors.email === ''}\r\n                    >\r\n                        <TextInput\r\n                            isRequired\r\n                            type=\"email\"\r\n                            id=\"email-address\"\r\n                            name=\"email\"\r\n                            maxLength={254}\r\n                            value={fields.email}\r\n                            onChange={this.handleChange}\r\n                            isValid={this.state.errors.email === ''}\r\n                        >\r\n                        </TextInput>\r\n                    </FormGroup>\r\n                    <FormGroup\r\n                        label={Msg.localize('firstName')}\r\n                        isRequired\r\n                        fieldId=\"first-name\"\r\n                        helperTextInvalid={this.state.errors.firstName}\r\n                        isValid={this.state.errors.firstName === ''}\r\n                    >\r\n                        <TextInput\r\n                            isRequired\r\n                            type=\"text\"\r\n                            id=\"first-name\"\r\n                            name=\"firstName\"\r\n                            maxLength={254}\r\n                            value={fields.firstName}\r\n                            onChange={this.handleChange}\r\n                            isValid={this.state.errors.firstName === ''}\r\n                        >\r\n                        </TextInput>\r\n                    </FormGroup>\r\n                    <FormGroup\r\n                        label={Msg.localize('lastName')}\r\n                        isRequired\r\n                        fieldId=\"last-name\"\r\n                        helperTextInvalid={this.state.errors.lastName}\r\n                        isValid={this.state.errors.lastName === ''}\r\n                    >\r\n                        <TextInput\r\n                            isRequired\r\n                            type=\"text\"\r\n                            id=\"last-name\"\r\n                            name=\"lastName\"\r\n                            maxLength={254}\r\n                            value={fields.lastName}\r\n                            onChange={this.handleChange}\r\n                            isValid={this.state.errors.lastName === ''}\r\n                        >\r\n                        </TextInput>\r\n                    </FormGroup>\r\n                    {features.isInternationalizationEnabled && <FormGroup\r\n                        label={Msg.localize('selectLocale')}\r\n                        isRequired\r\n                        fieldId=\"locale\"\r\n                    >\r\n                        <LocaleSelector id=\"locale-selector\"\r\n                            value={fields.attributes!.locale || ''}\r\n                            onChange={value => this.setState({\r\n                                errors: this.state.errors,\r\n                                formFields: { ...this.state.formFields, attributes: { ...this.state.formFields.attributes, locale: [value] }}\r\n                            })}\r\n                        />\r\n                    </FormGroup>}\r\n                    <ActionGroup>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            id=\"save-btn\"\r\n                            variant=\"primary\"\r\n                            isDisabled={Object.values(this.state.errors).filter(e => e !== '').length !== 0}\r\n                        >\r\n                            <Msg msgKey=\"doSave\" />\r\n                        </Button>\r\n                        <Button\r\n                            id=\"cancel-btn\"\r\n                            variant=\"secondary\"\r\n                            onClick={this.handleCancel}\r\n                        >\r\n                            <Msg msgKey=\"doCancel\" />\r\n                        </Button>\r\n                    </ActionGroup>\r\n                </Form>\r\n\r\n           { this.isDeleteAccountAllowed && \r\n            <div id=\"delete-account\" style={{marginTop:\"30px\"}}>\r\n             <Expandable toggleText=\"Delete Account\">\r\n                 <Grid gutter={\"sm\"}>\r\n                        <GridItem span={6}>\r\n                             <p>\r\n                                <Msg msgKey=\"deleteAccountWarning\" />\r\n                             </p>\r\n                        </GridItem>\r\n                        <GridItem span={4}>\r\n                            <KeycloakContext.Consumer>\r\n                                { (keycloak: KeycloakService) => (\r\n                                        <Button id=\"delete-account-btn\" variant=\"danger\" onClick={() => this.handleDelete(keycloak)} className=\"delete-button\"><Msg msgKey=\"doDelete\" /></Button>\r\n                                )}\r\n                            </KeycloakContext.Consumer>\r\n                        </GridItem>\r\n                        <GridItem span={2}>\r\n                        </GridItem>\r\n                    </Grid>\r\n                                \r\n              </Expandable> \r\n              </div>}\r\n            </ContentPage>\r\n        );\r\n    }\r\n\r\n    private UsernameInput = () => (\r\n        <TextInput\r\n            isRequired\r\n            type=\"text\"\r\n            id=\"user-name\"\r\n            name=\"username\"\r\n            maxLength={254}\r\n            value={this.state.formFields.username}\r\n            onChange={this.handleChange}\r\n            isValid={this.state.errors.username === ''}\r\n        >\r\n        </TextInput>\r\n    );\r\n\r\n    private RestrictedUsernameInput = () => (\r\n        <TextInput\r\n            isDisabled\r\n            type=\"text\"\r\n            id=\"user-name\"\r\n            name=\"username\"\r\n            value={this.state.formFields.username}\r\n        >\r\n        </TextInput>\r\n    );\r\n};"],"file":"AccountPage.js"}